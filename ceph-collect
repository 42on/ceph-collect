#!/usr/bin/env python
"""
ceph-collect is a tool used by 42on to gather information from a Ceph cluster
in case of support or emergency assistance.

The tool gathers information from the Ceph cluster and creates a tarball in /tmp

Author: Wido den Hollander <wido@42on.com>
License: GPL2
"""

import argparse
import datetime
import sys
import shutil
import logging
import tempfile
import tarfile
import rados
import json
import subprocess

CEPH_CONFIG_FILE = '/etc/ceph/ceph.conf'
CEPH_TIMEOUT = 10

# Logging configuration
logging.basicConfig(stream=sys.stdout, level=logging.INFO)

LOGGER = logging.getLogger()


# Functions to gather Ceph information
def write_file(filename, content):
    """
    :param filename: File to write to
    :param content: Content to write to file
    :return: True on succes
    """
    with open(filename, 'w') as file_handle:
        file_handle.write(content)
        return True


def read_file(filename):
    """
    :param filename: File to read contents from
    :return: File contents as a String
    """
    with open(filename, 'r') as file_handle:
        return file_handle.read()


def get_rados_connection(ceph_config, timeout):
    """
    Create a connection with a Ceph cluster
    :param ceph_config: Path to ceph.conf file
    :param timeout: Seconds for timeouts on Ceph operations
    :return: Rados connection
    """
    LOGGER.debug('Using Ceph configuration file: %s', ceph_config)
    r = rados.Rados(conffile=ceph_config)

    LOGGER.debug('Setting client_mount_timeout to: %d', timeout)
    r.conf_set('client_mount_timeout', str(timeout))

    LOGGER.debug('Connecting to Ceph cluster')
    r.connect(timeout=timeout)

    return r


def spawn(command, shell=True):
    """
    Simply spawn a process and return the output
    """
    p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=shell)
    (result, _) = p.communicate()
    return result.strip()


def ceph_mon_command(r, command, timeout, output_format='plain'):
    """
    Using librados directly execute a command inside the Monitors
    """
    cmd = {'prefix': command, 'format': output_format}
    _, buf, _ = r.mon_command(json.dumps(cmd), b'', timeout=timeout)
    return buf


def get_health_info(r, timeout):
    info = dict()
    info['stat'] = ceph_mon_command(r, 'health', timeout)
    info['detail'] = ceph_mon_command(r, 'health detail', timeout)
    info['df'] = ceph_mon_command(r, 'df', timeout)
    return info


def get_mon_info(r, timeout):
    info = dict()
    info['stat'] = ceph_mon_command(r, 'mon stat', timeout)
    info['dump'] = ceph_mon_command(r, 'mon dump', timeout)
    info['map'] = ceph_mon_command(r, 'mon getmap', timeout)
    return info


def get_osd_info(r, timeout):
    info = dict()
    info['tree'] = ceph_mon_command(r, 'osd tree', timeout)
    info['df'] = ceph_mon_command(r, 'osd df', timeout)
    info['dump'] = ceph_mon_command(r, 'osd dump', timeout)
    info['stat'] = ceph_mon_command(r, 'osd stat', timeout)
    info['crushmap'] = ceph_mon_command(r, 'osd getcrushmap', timeout)
    info['map'] = ceph_mon_command(r, 'osd getmap', timeout)
    info['metadata'] = ceph_mon_command(r, 'osd metadata', timeout)
    return info


def get_mds_info(r, timeout):
    info = dict()
    info['dump'] = ceph_mon_command(r, 'mds dump', timeout)
    info['stat'] = ceph_mon_command(r, 'mds stat', timeout)
    info['map'] = ceph_mon_command(r, 'mds getmap', timeout)
    return info


def get_pg_info(r, timeout):
    info = dict()
    info['stat'] = ceph_mon_command(r, 'pg stat', timeout)
    info['dump'] = ceph_mon_command(r, 'pg dump', timeout)
    info['dump_stuck'] = ceph_mon_command(r, 'pg dump_stuck', timeout)
    return info


def get_ceph_config(ceph_config):
    return read_file(ceph_config)


def collect_ceph_information(r, ceph_config, output_directory, timeout,
                             cleanup=True):
    tmpdir = tempfile.mkdtemp()

    LOGGER.debug('Using temporary directory %s', tmpdir)

    files = dict()

    LOGGER.info('Gathering overall system information')
    files['uname'] = spawn('uname -a') + '\n'
    files['lsb_release'] = spawn('lsb_release -a') + '\n'

    LOGGER.info('Gathering overall Ceph information')
    files['status'] = ceph_mon_command(r, 'status', timeout)
    files['version'] = spawn('ceph -v') + '\n'
    files['fsid'] = str(r.get_fsid()) + '\n'
    files['ceph.conf'] = str(get_ceph_config(ceph_config))

    LOGGER.info('Gathering Health information')
    for key, item in get_health_info(r, timeout).items():
        files['health_{0}'.format(key)] = item

    LOGGER.info('Gathering MON information')
    for key, item in get_mon_info(r, timeout).items():
        files['mon_{0}'.format(key)] = item

    LOGGER.info('Gathering OSD information')
    for key, item in get_osd_info(r, timeout).items():
        files['osd_{0}'.format(key)] = item

    LOGGER.info('Gathering PG information')
    for key, item in get_pg_info(r, timeout).items():
        files['pg_{0}'.format(key)] = item

    LOGGER.info('Gathering MDS information')
    for key, item in get_mds_info(r, timeout).items():
        files['mds_{0}'.format(key)] = item

    timestr = datetime.datetime.now().strftime("%Y%m%d_%H%I%S")
    tarball = '{0}/ceph-collect_{1}.tar.gz'.format(output_directory, timestr)

    with tarfile.open(tarball, 'w:gz') as tar:
        for filename, content in files.items():
            tmpfile = '{0}/{1}'.format(tmpdir, filename)
            LOGGER.debug('Writing file %s', tmpfile)
            write_file(tmpfile, content)
            tar.add(name=tmpfile,
                    arcname='ceph-collect_{0}/{1}'.format(timestr, filename))

    tar.close()

    LOGGER.info('Outputted Ceph information to %s', tarball)

    if cleanup:
        LOGGER.debug('Cleaning up temporary directory %s', tmpdir)
        shutil.rmtree(tmpdir)
    else:
        LOGGER.debug('Not cleaning up temporary directory %s', tmpdir)


if __name__ == '__main__':
    RETURN_VALUE = 1
    PARSER = argparse.ArgumentParser(description='Ceph Collect: Gather '
                                                 'information from a Ceph '
                                                 'cluster for support desks')
    PARSER.add_argument('--ceph-config', action='store', dest='ceph_config',
                        default=CEPH_CONFIG_FILE,
                        help='Ceph Configuration file')
    PARSER.add_argument('--output-dir', action='store', dest='output_dir',
                        default=tempfile.gettempdir(),
                        help='Directory to store output in')
    PARSER.add_argument('--timeout', action='store', type=int,
                        dest='timeout',
                        default=CEPH_TIMEOUT,
                        help='Timeout for Ceph operations')
    PARSER.add_argument('--debug', action='store_true', dest='debug',
                        default=False, help='Debug logging')
    PARSER.add_argument('--no-cleanup', action='store_false', dest='cleanup',
                        default=True, help='Clean up temporary directory')
    ARGS = PARSER.parse_args()

    if ARGS.debug:
        LOGGER.setLevel(logging.DEBUG)

    try:
        CNX = get_rados_connection(ceph_config=ARGS.ceph_config,
                                   timeout=ARGS.timeout)
        collect_ceph_information(r=CNX, ceph_config=ARGS.ceph_config,
                                 output_directory=ARGS.output_dir,
                                 timeout=ARGS.timeout, cleanup=ARGS.cleanup)
        RETURN_VALUE = 0
    except (rados.Error,
            tarfile.TarError,
            IOError,
            KeyError,
            ValueError) as exc:
        LOGGER.error(exc)

    sys.exit(RETURN_VALUE)
